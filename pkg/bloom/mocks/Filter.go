// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

type Filter_Expecter struct {
	mock *mock.Mock
}

func (_m *Filter) EXPECT() *Filter_Expecter {
	return &Filter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, item
func (_m *Filter) Add(ctx context.Context, item interface{}) {
	_m.Called(ctx, item)
}

// Filter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Filter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - item interface{}
func (_e *Filter_Expecter) Add(ctx interface{}, item interface{}) *Filter_Add_Call {
	return &Filter_Add_Call{Call: _e.mock.On("Add", ctx, item)}
}

func (_c *Filter_Add_Call) Run(run func(ctx context.Context, item interface{})) *Filter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Filter_Add_Call) Return() *Filter_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *Filter_Add_Call) RunAndReturn(run func(context.Context, interface{})) *Filter_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: ctx, item
func (_m *Filter) Exist(ctx context.Context, item interface{}) bool {
	ret := _m.Called(ctx, item)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) bool); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Filter_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type Filter_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx context.Context
//   - item interface{}
func (_e *Filter_Expecter) Exist(ctx interface{}, item interface{}) *Filter_Exist_Call {
	return &Filter_Exist_Call{Call: _e.mock.On("Exist", ctx, item)}
}

func (_c *Filter_Exist_Call) Run(run func(ctx context.Context, item interface{})) *Filter_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Filter_Exist_Call) Return(_a0 bool) *Filter_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Filter_Exist_Call) RunAndReturn(run func(context.Context, interface{}) bool) *Filter_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilterNamespace provides a mock function with given fields:
func (_m *Filter) GetFilterNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Filter_GetFilterNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilterNamespace'
type Filter_GetFilterNamespace_Call struct {
	*mock.Call
}

// GetFilterNamespace is a helper method to define mock.On call
func (_e *Filter_Expecter) GetFilterNamespace() *Filter_GetFilterNamespace_Call {
	return &Filter_GetFilterNamespace_Call{Call: _e.mock.On("GetFilterNamespace")}
}

func (_c *Filter_GetFilterNamespace_Call) Run(run func()) *Filter_GetFilterNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Filter_GetFilterNamespace_Call) Return(_a0 string) *Filter_GetFilterNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Filter_GetFilterNamespace_Call) RunAndReturn(run func() string) *Filter_GetFilterNamespace_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFilter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilter(t mockConstructorTestingTNewFilter) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
