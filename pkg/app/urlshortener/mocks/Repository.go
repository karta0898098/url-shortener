// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "url-shortener/pkg/app/urlshortener/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// FindShortenedURL provides a mock function with given fields: ctx, short
func (_m *Repository) FindShortenedURL(ctx context.Context, short string) (*entity.ShortenedURL, error) {
	ret := _m.Called(ctx, short)

	var r0 *entity.ShortenedURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ShortenedURL, error)); ok {
		return rf(ctx, short)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ShortenedURL); ok {
		r0 = rf(ctx, short)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShortenedURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, short)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindShortenedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindShortenedURL'
type Repository_FindShortenedURL_Call struct {
	*mock.Call
}

// FindShortenedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - short string
func (_e *Repository_Expecter) FindShortenedURL(ctx interface{}, short interface{}) *Repository_FindShortenedURL_Call {
	return &Repository_FindShortenedURL_Call{Call: _e.mock.On("FindShortenedURL", ctx, short)}
}

func (_c *Repository_FindShortenedURL_Call) Run(run func(ctx context.Context, short string)) *Repository_FindShortenedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_FindShortenedURL_Call) Return(shortenedURL *entity.ShortenedURL, err error) *Repository_FindShortenedURL_Call {
	_c.Call.Return(shortenedURL, err)
	return _c
}

func (_c *Repository_FindShortenedURL_Call) RunAndReturn(run func(context.Context, string) (*entity.ShortenedURL, error)) *Repository_FindShortenedURL_Call {
	_c.Call.Return(run)
	return _c
}

// StoreShortenedURL provides a mock function with given fields: ctx, shortenedURL
func (_m *Repository) StoreShortenedURL(ctx context.Context, shortenedURL *entity.ShortenedURL) error {
	ret := _m.Called(ctx, shortenedURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ShortenedURL) error); ok {
		r0 = rf(ctx, shortenedURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_StoreShortenedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreShortenedURL'
type Repository_StoreShortenedURL_Call struct {
	*mock.Call
}

// StoreShortenedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortenedURL *entity.ShortenedURL
func (_e *Repository_Expecter) StoreShortenedURL(ctx interface{}, shortenedURL interface{}) *Repository_StoreShortenedURL_Call {
	return &Repository_StoreShortenedURL_Call{Call: _e.mock.On("StoreShortenedURL", ctx, shortenedURL)}
}

func (_c *Repository_StoreShortenedURL_Call) Run(run func(ctx context.Context, shortenedURL *entity.ShortenedURL)) *Repository_StoreShortenedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ShortenedURL))
	})
	return _c
}

func (_c *Repository_StoreShortenedURL_Call) Return(err error) *Repository_StoreShortenedURL_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_StoreShortenedURL_Call) RunAndReturn(run func(context.Context, *entity.ShortenedURL) error) *Repository_StoreShortenedURL_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
